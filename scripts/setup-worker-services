#!/bin/bash

set -euo pipefail

readonly dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

pushd "${dir}/../"
trap 'popd' EXIT

for i in {0..2}; do
  cat <<'EOF' | vagrant ssh "worker-${i}" -- sudo bash
set -euo pipefail

apt-get update
apt-get install -y socat libgpgme11 make conntrack

mkdir -p \
  /etc/containers \
  /etc/containerd \
  /etc/cni/net.d \
  /opt/cni/bin \
  /var/lib/kubelet \
  /var/lib/kube-proxy \
  /var/lib/kubernetes \
  /var/run/kubernetes

# make -C /vagrant/tools/crio all
cp /vagrant/tools/cni_plugins/* /opt/cni/bin/
cp /vagrant/tools/runc.amd64 /usr/local/bin/runc
cp /vagrant/tools/crictl /usr/local/bin/
cp /vagrant/tools/containerd/bin/* /bin/
cp /vagrant/tools/{kube-proxy,kubelet,kubectl} /usr/local/bin/

# Override the CNI shipped with CRIO.
cp "/vagrant/config/$(hostname)-10-bridge.conf" /etc/cni/net.d/10-bridge.conf
cp "/vagrant/config/$(hostname)-99-loopback.conf" /etc/cni/net.d/99-loopback.conf

cp /vagrant/config/containerd-config.toml /etc/containerd/config.toml
cp /vagrant/config/containerd.service /etc/systemd/system/containerd.service

# Create a registries configuration, so that container images can be pulled successfully.
cp /vagrant/config/registries.conf /etc/containers/
cp /vagrant/config/kube-proxy.kubeconfig /var/lib/kube-proxy/kubeconfig

cp /vagrant/certificates/ca.pem /var/lib/kubernetes/
cp "/vagrant/certificates/$(hostname).pem" "/vagrant/certificates/$(hostname)-key.pem" /var/lib/kubelet
cp "/vagrant/config/$(hostname).kubeconfig" /var/lib/kubelet/kubeconfig
cp /vagrant/config/$(hostname)-kubelet-config  /var/lib/kubelet/kubelet-config.yaml

cp "/vagrant/config/$(hostname)-kubelet.service" /etc/systemd/system/kubelet.service
cp /vagrant/config/kube-proxy.service /etc/systemd/system/

systemctl daemon-reload
services="containerd kubelet kube-proxy"
systemctl enable ${services}
systemctl start ${services}
systemctl status --no-pager ${services}
EOF
done
